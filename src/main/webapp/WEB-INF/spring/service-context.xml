<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	
	
	<!-- 데이터베이스 연결 집중화 -->
	<bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://211.238.142.247/newlecture?autoReconnect=true&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8"/>
		<property name="username" value="sist"/>
		<property name="password" value="cclass"/>
	</bean>
	
	
	<bean name="template" class="org.springframework.jdbc.core.JdbcTemplate" >
	<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 트랜잭션처리 4번 annotation에서 재료로 사용하기 >> namespaced에서  tx를 선택-->
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource"></property>	
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- 트랜잭션처리 1번-->
	<!-- <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource"></property>	
	</bean> -->
	
	
	<!-- 트랜잭션처리 2번  네임에 매니져는 아까 1번에 그놈이긴 한데-->
	<!-- <bean name="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager"></property>	
	</bean> -->
	
	<!-- 트랜잭션처리 3번  aop 이용하기 (xml 기반)-->	
	<!-- <bean name="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor"> 
		<property name="transactionManager" ref="transactionManager"></property>	
		<property name="transactionAttributes">
		<props>
			<prop key="insert">PROPAGATION_REQUIRED</prop>
		</props>
		</property>	
	</bean> -->
	
	<!-- <bean class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target" ref="noticeDao" />	
		<property name="interceptorNames">
		<list>
		<value>transactionInterceptor</value>	
		</list>
		</property>	
	</bean> -->
	

	<bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:com/newlecture/webapp/dao/mybatis/mapper/*.xml"/>
	</bean>
	
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"/>
	</bean>
	
	
	<!--  DAO 객체들-->
	<bean name="noticeDao" class="com.newlecture.webapp.dao.spring.SpringNoticeDao" />	
	<bean class="com.newlecture.webapp.dao.spring.SpringMemberDao" />
	<bean class="com.newlecture.webapp.dao.mybatis.MyBatisNoticeFileDao" />
<!--<bean class="com.newlecture.webapp.dao.mybatis.MyBatisNoticeDao" />
	<bean class="com.newlecture.webapp.dao.mybatis.MyBatisNoticeFileDao" /> -->
	
	<!--  service 객체-->
	<bean class="com.newlecture.webapp.service.admin.BoardService" />

<context:annotation-config />
</beans>
